----------------------------------------
Introduction to GitHub
----------------------------------------
GitHub is GUI based
If you want to keep the code or get the code from the GitHub, internet connection is essential.
Sign-up to GitHub
Create one GitHub account

------------------------------------------------
Creation of GitHub account
------------------------------------------------

---------------------------------------
Working with GitHub
---------------------------------------
In GitHub we will create repositories.
two types of repos;
	1. Public repo		- anyone can access the public repos
	2. Private repo	- which is only for you or you can give permissions to a specific user

--------------------------
Creation of repo
--------------------------
Whenever we create a repo, repo URL will be available

---------------------------------------------------------------------------
Pushing the files from local repo to remote repo
---------------------------------------------------------------------------
git remote add origin https://github.com/KastroVKiran/staragile-public-repo.git
git branch -M main
git push -u origin main

When we are pushing the code for the first time, only then you have to configure the token
PAT creation is one time activity

-------------------------------------------------------------------
How to write the content in readme.md file
-------------------------------------------------------------------
md - markdown language
To decorate your GitHub repos or your GitHub account, we will write the readme.md file

----------------------------
Forking a repo
----------------------------
If you want to get others' repos into your GitHub account, then fork that repo.
When we fork a repo, automatically, whenever the owner of the original GitHub repo makes any changes, all those changes will be replicated into your GitHub account as well

--------------------------------------------------------------------
How to get a remote repo to the local system
--------------------------------------------------------------------
To get the repo from the GitHub account to the local system, we will use GIT CLONE
git clone

-----------------------
GIT Branches
-----------------------
Netflix - 4 teams - dev, test, db, devops - single repo
	Dev - dev files (5)		- dev branch
	Test - test files (10)		- test branch
	DB	- db files (7)		- db branch
	DevOps - devops (15)	- devops branch
GitHub branches are used to segregate the work done by different teams working on the same project

Default branch is MASTER/MAIN

GIT IGNORE

Changing the default branch (in GitHub)

Renaming a branch (using git terminal)
	git branch -m <Current Branch Name> <New Branch Name>
Renaming a branch (in GitHub)
	Method1: 
	Open repo ---> Settings ----> Make the branch you want to rename as a default branch and then 	rename the branch
	Method 2:
	Open repo ----> Click on "view all branches" ----> Click on 3 dots (extreme right side) ----> rename 	the branch

Deleting a branch (using git terminal)
	git branch -D <Branch Name> 
Deleting a branch (in GitHub)
	Open repo ----> Click on "view all branches" ----> Click on 3 dots (extreme right side) ----> delete 	the branch
	Note: You can recover the deleted branch, if you don't reload the page. Once the page is reloaded 	there is no way of getting back the branch

GIT PULL
--------------------------
git clone is used to get the complete code into our local repo
git pull is used to get the changes made in the remote repo

Note: Whenever you want to push the code from local to remote repo, it is recommended to pull the changes

GIT MERGE
-------------------------
Merging is the concept of merging one branch of files with another branch of files


GIT REBASE
-------------------------
It is also used to add the files from one branch to another branch

Merge Vs Rebase
--------------------------------
1. Merge will show files; rebase will not show the files
2. Merge will show the entire history; rebase will not show the history
3. Merge will not show branches, rebase will show branches

Merging the branches in the GitHub console
-------------------------------------------------------------
PULL REQUEST

db-branch ---- 5 db files, 1 master.txt 
dev-branch ---- 5 dev files, 1 master.txt 

MERGE CONFLICTS
-------------------------------------------
Developer 1 --- Branch 1 ---- file1.txt --- JAVA, JAVA Version 17
Developer 2 --- Branch 2 ---- file1.txt --- PYTHON

Cherry Pick
--------------------------
Tree --- 5 cherries ----- 3 cherries are good

Branch 1 --- 5 files
Branch 2 --- 3 specific files

Collaborators in GitHub
----------------------------------------

GitHub collaborators

Note: For public repos, if it's a free GitHub account, a maximum of 100 collaborators can be added.



Basic Git Commands
--------------------------------
git init - Initialize a new Git repository.
git clone <repo-url> - Clone a repository into a new directory.
git status - Show the working tree status.
git add <file> - Add file contents to the index (staging area).
git add. - Stage all changes in the current directory.
git commit -m "<message>" - Commit changes with a message.
git commit -a -m "<message>" - Commit all tracked changes.
git diff - Show changes between commits, commits, and working tree, etc.
git log - Show commit logs.
git show <commit> - Show the changes made in a specific commit.

Branching and Merging
-------------------------------------------
git branch - List branches.
git branch <branch-name> - Create a new branch.
git checkout <branch-name> - Switch to a branch.
git checkout -b <branch-name> - Create and switch to a new branch.
git merge <branch-name> - Merge a branch into the current branch.
git rebase <branch-name> - Reapply commits on top of another base tip.
git branch -d <branch-name> - Delete a branch.
git cherry-pick <commit> - Apply the changes introduced by some existing commits.
git merge --no-ff <branch-name> - Merge without fast-forwarding.
git rebase -i <commit> - Interactively rebase commits.

Remote Repositories
-------------------------------
git remote -v - Show remote repositories.
git remote add <name> <url> - Add a remote repository.
git fetch <remote> - Fetch changes from a remote repository.
git pull <remote> <branch> - Fetch and merge changes from a remote branch.
git push <remote> <branch> - Push changes to a remote branch.
git push --force <remote> <branch> - Force push to a remote branch.
git pull --rebase - Fetch and rebase the current branch.
git remote remove <name> - Remove a remote repository.
git remote rename <old-name> <new-name> - Rename a remote.

Stashing and Cleaning
-----------------------------------
git stash - Stash the changes in a dirty working directory.
git stash pop - Apply the latest stash and remove it from the stash list.
git stash list - List all stashed changes.
git stash apply - Apply the latest stash without removing it.
git clean -fd - Remove untracked files and directories.
git clean -fx - Remove untracked files, including ignored files.

Configuration and Help
--------------------------------
git config --global user.name "<name>" - Set global username.
git config --global user.email "<email>" - Set global email.
git config --list - List all Git configurations.
git config --global core.editor <editor> - Set the default text editor for Git.
git config --global alias.<alias-name> <command> - Create an alias for a command.
git help <command> - Get help for a specific command.

git reset <commit> - Reset the current branch to a specific commit.
git reset --hard <commit> - Reset and discard all changes.
git revert <commit> - Create a new commit that undoes a previous commit.
git blame <file> - Show what revision and author last modified each line of a file.
git shortlog - Summarize commit history.
git push origin HEAD - Push the current branch to the remote repository.
git mv <old> <new> - Move or rename a file.
git log --oneline - Show a brief log of commits.
git log --graph - Show a graphical representation of the commit history.
git blame <file> - View blame information for a file.
git reset <file> - Unstage a file.
git commit --amend - Modify the last commit.
git fetch origin - Fetch changes from the origin.
